/*
 * Copyright (C) 2014 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.sched.build;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.Writer;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

/**
 * Class providing some meta-data to discover elements without any configuration
 */
public class SchedDiscover {
  @Nonnull
  private static final String RESOURCE_NAME = "com.android.sched.discover";

  @Nonnull
  private static final String EOL = System.getProperty("line.separator");

  /**
   * This class represents an element with its extra information
   */
  public static class SchedData implements Comparable<SchedData> {
    @Nonnull
    private final String name;
    @CheckForNull
    private final String extra;

    public SchedData(@Nonnull String name) {
      this.name  = name;
      this.extra = null;
    }

    public SchedData(@Nonnull String name, @Nonnull String extra) {
      this.name  = name;
      this.extra = extra;
    }

    @Nonnull
    public String getName() {
      return name;
    }

    @CheckForNull
    public String getExtra() {
      return extra;
    }

    boolean hasExtra() {
      return extra != null;
    }

    @Override
    public int compareTo(SchedData element) {
      return name.compareTo(element.name);
    }

    @Override
    public boolean equals(Object obj) {
      if (obj instanceof SchedData) {
        return name.equals(((SchedData) obj).name);
      } else {
        return false;
      }
    }

    @Override
    public int hashCode() {
      return name.hashCode();
    }
  }

  @Nonnull
  protected final Map<String, Set<SchedData>> map = new HashMap<String, Set<SchedData>>();

  public void add(@Nonnull String name, @Nonnull String element) {
      Set<SchedData> set = map.get(name);
      if (set == null) {
        set = new HashSet<SchedData>();
        map.put(name, set);
      }

      SchedData data = new SchedData(element);
      set.remove(data);
      set.add(data);
  }

  public void add(@Nonnull String name, @Nonnull String element, @Nonnull String extra) {
    Set<SchedData> set = map.get(name);
    if (set == null) {
      set = new HashSet<SchedData>();
      map.put(name, set);
    }

    SchedData data = new SchedData(element, extra);
    set.remove(data);
    set.add(data);
  }

  public void remove(@Nonnull String name, @Nonnull String element) {
    Set<SchedData> set = map.get(name);
    if (set != null) {
      set.remove(new SchedData(element));
    }
  }

  @Nonnull
  public Set<SchedData> get(@Nonnull String name) {
    Set<SchedData> set = map.get(name);
    if (set == null) {
      set = Collections.emptySet();
    }

    return Collections.unmodifiableSet(set);
  }

  public void writeResource(@Nonnull Writer writer) throws IOException {
    writeResource(writer, JarMerger.class.getCanonicalName());
  }

  protected void writeResource(@Nonnull Writer writer, @Nonnull String identifier)
      throws IOException {
    writer.write("#" + EOL);
    writer.write("# Generated by " + identifier + EOL);
    writer.write("# on " + new Date().toString() + EOL);
    writer.write("#" + EOL);

    for (Entry<String, Set<SchedData>> entry : map.entrySet()) {
      writer.write("*" + entry.getKey() + EOL);
      for (SchedData element : entry.getValue()) {
        if (element.hasExtra()) {
          writer.write("-" + element.getExtra() + EOL);
        }
        writer.write("+" + element.getName() + EOL);
      }
    }
  }

  public void readResource(@Nonnull BufferedReader reader) throws IOException {
    String sup = "<error>";
    String extra = null;

    String line = reader.readLine();
    while (line != null) {
      char prefix = line.charAt(0);

      if (prefix == '*') {
        sup = line.substring(1);
      } else if (prefix == '-') {
        extra = line.substring(1);
      } else if (prefix == '+') {
        if (extra != null) {
          add(sup, line.substring(1), extra);
          extra = null;
        } else {
          add(sup, line.substring(1));
        }
      }

      line = reader.readLine();
    }
  }

  @Nonnull
  public String getResourceName() {
    return RESOURCE_NAME;
  }
}